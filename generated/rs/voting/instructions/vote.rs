//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct Vote {
    pub signer: solana_pubkey::Pubkey,

    pub poll_account: solana_pubkey::Pubkey,

    pub candidate_account: solana_pubkey::Pubkey,

    pub voter_receipt: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl Vote {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.signer, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.poll_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.candidate_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.voter_receipt,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&VoteInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::VOTING_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct VoteInstructionData {
    discriminator: [u8; 8],
}

impl VoteInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [227, 110, 155, 23, 136, 126, 172, 25],
        }
    }
}

impl Default for VoteInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `Vote`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[writable]` poll_account
///   2. `[writable]` candidate_account
///   3. `[writable]` voter_receipt
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct VoteBuilder {
    signer: Option<solana_pubkey::Pubkey>,
    poll_account: Option<solana_pubkey::Pubkey>,
    candidate_account: Option<solana_pubkey::Pubkey>,
    voter_receipt: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl VoteBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn poll_account(&mut self, poll_account: solana_pubkey::Pubkey) -> &mut Self {
        self.poll_account = Some(poll_account);
        self
    }
    #[inline(always)]
    pub fn candidate_account(&mut self, candidate_account: solana_pubkey::Pubkey) -> &mut Self {
        self.candidate_account = Some(candidate_account);
        self
    }
    #[inline(always)]
    pub fn voter_receipt(&mut self, voter_receipt: solana_pubkey::Pubkey) -> &mut Self {
        self.voter_receipt = Some(voter_receipt);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = Vote {
            signer: self.signer.expect("signer is not set"),
            poll_account: self.poll_account.expect("poll_account is not set"),
            candidate_account: self
                .candidate_account
                .expect("candidate_account is not set"),
            voter_receipt: self.voter_receipt.expect("voter_receipt is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `vote` CPI accounts.
pub struct VoteCpiAccounts<'a, 'b> {
    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub poll_account: &'b solana_account_info::AccountInfo<'a>,

    pub candidate_account: &'b solana_account_info::AccountInfo<'a>,

    pub voter_receipt: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `vote` CPI instruction.
pub struct VoteCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub poll_account: &'b solana_account_info::AccountInfo<'a>,

    pub candidate_account: &'b solana_account_info::AccountInfo<'a>,

    pub voter_receipt: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> VoteCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: VoteCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            poll_account: accounts.poll_account,
            candidate_account: accounts.candidate_account,
            voter_receipt: accounts.voter_receipt,
            system_program: accounts.system_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.signer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.poll_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.candidate_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.voter_receipt.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&VoteInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::VOTING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.poll_account.clone());
        account_infos.push(self.candidate_account.clone());
        account_infos.push(self.voter_receipt.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Vote` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[writable]` poll_account
///   2. `[writable]` candidate_account
///   3. `[writable]` voter_receipt
///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct VoteCpiBuilder<'a, 'b> {
    instruction: Box<VoteCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> VoteCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(VoteCpiBuilderInstruction {
            __program: program,
            signer: None,
            poll_account: None,
            candidate_account: None,
            voter_receipt: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn poll_account(
        &mut self,
        poll_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.poll_account = Some(poll_account);
        self
    }
    #[inline(always)]
    pub fn candidate_account(
        &mut self,
        candidate_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candidate_account = Some(candidate_account);
        self
    }
    #[inline(always)]
    pub fn voter_receipt(
        &mut self,
        voter_receipt: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.voter_receipt = Some(voter_receipt);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = VoteCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            poll_account: self
                .instruction
                .poll_account
                .expect("poll_account is not set"),

            candidate_account: self
                .instruction
                .candidate_account
                .expect("candidate_account is not set"),

            voter_receipt: self
                .instruction
                .voter_receipt
                .expect("voter_receipt is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct VoteCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    poll_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    candidate_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    voter_receipt: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
