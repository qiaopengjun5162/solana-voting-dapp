//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct InitializePoll {
    pub signer: solana_pubkey::Pubkey,

    pub poll_account: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl InitializePoll {
    pub fn instruction(
        &self,
        args: InitializePollInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializePollInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.signer, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.poll_account,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializePollInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::VOTING_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePollInstructionData {
    discriminator: [u8; 8],
}

impl InitializePollInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [193, 22, 99, 197, 18, 33, 115, 117],
        }
    }
}

impl Default for InitializePollInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePollInstructionArgs {
    pub name: String,
    pub description: String,
    pub start_time: u64,
    pub end_time: u64,
}

/// Instruction builder for `InitializePoll`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[writable, signer]` poll_account
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializePollBuilder {
    signer: Option<solana_pubkey::Pubkey>,
    poll_account: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    name: Option<String>,
    description: Option<String>,
    start_time: Option<u64>,
    end_time: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializePollBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn poll_account(&mut self, poll_account: solana_pubkey::Pubkey) -> &mut Self {
        self.poll_account = Some(poll_account);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn description(&mut self, description: String) -> &mut Self {
        self.description = Some(description);
        self
    }
    #[inline(always)]
    pub fn start_time(&mut self, start_time: u64) -> &mut Self {
        self.start_time = Some(start_time);
        self
    }
    #[inline(always)]
    pub fn end_time(&mut self, end_time: u64) -> &mut Self {
        self.end_time = Some(end_time);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializePoll {
            signer: self.signer.expect("signer is not set"),
            poll_account: self.poll_account.expect("poll_account is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitializePollInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            description: self.description.clone().expect("description is not set"),
            start_time: self.start_time.clone().expect("start_time is not set"),
            end_time: self.end_time.clone().expect("end_time is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_poll` CPI accounts.
pub struct InitializePollCpiAccounts<'a, 'b> {
    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub poll_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_poll` CPI instruction.
pub struct InitializePollCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub signer: &'b solana_account_info::AccountInfo<'a>,

    pub poll_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializePollInstructionArgs,
}

impl<'a, 'b> InitializePollCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializePollCpiAccounts<'a, 'b>,
        args: InitializePollInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            poll_account: accounts.poll_account,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.signer.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.poll_account.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializePollInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::VOTING_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.poll_account.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializePoll` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[writable, signer]` poll_account
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializePollCpiBuilder<'a, 'b> {
    instruction: Box<InitializePollCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializePollCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializePollCpiBuilderInstruction {
            __program: program,
            signer: None,
            poll_account: None,
            system_program: None,
            name: None,
            description: None,
            start_time: None,
            end_time: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn poll_account(
        &mut self,
        poll_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.poll_account = Some(poll_account);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn description(&mut self, description: String) -> &mut Self {
        self.instruction.description = Some(description);
        self
    }
    #[inline(always)]
    pub fn start_time(&mut self, start_time: u64) -> &mut Self {
        self.instruction.start_time = Some(start_time);
        self
    }
    #[inline(always)]
    pub fn end_time(&mut self, end_time: u64) -> &mut Self {
        self.instruction.end_time = Some(end_time);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = InitializePollInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            description: self
                .instruction
                .description
                .clone()
                .expect("description is not set"),
            start_time: self
                .instruction
                .start_time
                .clone()
                .expect("start_time is not set"),
            end_time: self
                .instruction
                .end_time
                .clone()
                .expect("end_time is not set"),
        };
        let instruction = InitializePollCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            poll_account: self
                .instruction
                .poll_account
                .expect("poll_account is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializePollCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    signer: Option<&'b solana_account_info::AccountInfo<'a>>,
    poll_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    name: Option<String>,
    description: Option<String>,
    start_time: Option<u64>,
    end_time: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
