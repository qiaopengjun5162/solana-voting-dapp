/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "@solana/kit";
import { VOTING_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INITIALIZE_POLL_DISCRIMINATOR = new Uint8Array([
  193, 22, 99, 197, 18, 33, 115, 117,
]);

export function getInitializePollDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POLL_DISCRIMINATOR,
  );
}

export type InitializePollInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountPollAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountPollAccount extends string
        ? WritableSignerAccount<TAccountPollAccount> &
            AccountSignerMeta<TAccountPollAccount>
        : TAccountPollAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePollInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  description: string;
  startTime: bigint;
  endTime: bigint;
};

export type InitializePollInstructionDataArgs = {
  name: string;
  description: string;
  startTime: number | bigint;
  endTime: number | bigint;
};

export function getInitializePollInstructionDataEncoder(): Encoder<InitializePollInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["description", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["startTime", getU64Encoder()],
      ["endTime", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_POLL_DISCRIMINATOR }),
  );
}

export function getInitializePollInstructionDataDecoder(): Decoder<InitializePollInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["description", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["startTime", getU64Decoder()],
    ["endTime", getU64Decoder()],
  ]);
}

export function getInitializePollInstructionDataCodec(): Codec<
  InitializePollInstructionDataArgs,
  InitializePollInstructionData
> {
  return combineCodec(
    getInitializePollInstructionDataEncoder(),
    getInitializePollInstructionDataDecoder(),
  );
}

export type InitializePollInput<
  TAccountSigner extends string = string,
  TAccountPollAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pollAccount: TransactionSigner<TAccountPollAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitializePollInstructionDataArgs["name"];
  description: InitializePollInstructionDataArgs["description"];
  startTime: InitializePollInstructionDataArgs["startTime"];
  endTime: InitializePollInstructionDataArgs["endTime"];
};

export function getInitializePollInstruction<
  TAccountSigner extends string,
  TAccountPollAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTING_PROGRAM_ADDRESS,
>(
  input: InitializePollInput<
    TAccountSigner,
    TAccountPollAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePollInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountPollAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pollAccount: { value: input.pollAccount ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pollAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializePollInstructionDataEncoder().encode(
      args as InitializePollInstructionDataArgs,
    ),
  } as InitializePollInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPollAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializePollInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    pollAccount: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializePollInstructionData;
};

export function parseInitializePollInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializePollInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      pollAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializePollInstructionDataDecoder().decode(instruction.data),
  };
}
