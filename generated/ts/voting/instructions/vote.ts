/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { VOTING_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const VOTE_DISCRIMINATOR = new Uint8Array([
  227, 110, 155, 23, 136, 126, 172, 25,
]);

export function getVoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VOTE_DISCRIMINATOR);
}

export type VoteInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountPollAccount extends string | AccountMeta<string> = string,
  TAccountCandidateAccount extends string | AccountMeta<string> = string,
  TAccountVoterReceipt extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountPollAccount extends string
        ? WritableAccount<TAccountPollAccount>
        : TAccountPollAccount,
      TAccountCandidateAccount extends string
        ? WritableAccount<TAccountCandidateAccount>
        : TAccountCandidateAccount,
      TAccountVoterReceipt extends string
        ? WritableAccount<TAccountVoterReceipt>
        : TAccountVoterReceipt,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type VoteInstructionData = { discriminator: ReadonlyUint8Array };

export type VoteInstructionDataArgs = {};

export function getVoteInstructionDataEncoder(): FixedSizeEncoder<VoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: VOTE_DISCRIMINATOR }),
  );
}

export function getVoteInstructionDataDecoder(): FixedSizeDecoder<VoteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getVoteInstructionDataCodec(): FixedSizeCodec<
  VoteInstructionDataArgs,
  VoteInstructionData
> {
  return combineCodec(
    getVoteInstructionDataEncoder(),
    getVoteInstructionDataDecoder(),
  );
}

export type VoteAsyncInput<
  TAccountSigner extends string = string,
  TAccountPollAccount extends string = string,
  TAccountCandidateAccount extends string = string,
  TAccountVoterReceipt extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pollAccount: Address<TAccountPollAccount>;
  candidateAccount: Address<TAccountCandidateAccount>;
  voterReceipt?: Address<TAccountVoterReceipt>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getVoteInstructionAsync<
  TAccountSigner extends string,
  TAccountPollAccount extends string,
  TAccountCandidateAccount extends string,
  TAccountVoterReceipt extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTING_PROGRAM_ADDRESS,
>(
  input: VoteAsyncInput<
    TAccountSigner,
    TAccountPollAccount,
    TAccountCandidateAccount,
    TAccountVoterReceipt,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  VoteInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPollAccount,
    TAccountCandidateAccount,
    TAccountVoterReceipt,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pollAccount: { value: input.pollAccount ?? null, isWritable: true },
    candidateAccount: {
      value: input.candidateAccount ?? null,
      isWritable: true,
    },
    voterReceipt: { value: input.voterReceipt ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.voterReceipt.value) {
    accounts.voterReceipt.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 101, 99, 101, 105, 112, 116]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.pollAccount.value)),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pollAccount),
      getAccountMeta(accounts.candidateAccount),
      getAccountMeta(accounts.voterReceipt),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getVoteInstructionDataEncoder().encode({}),
  } as VoteInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPollAccount,
    TAccountCandidateAccount,
    TAccountVoterReceipt,
    TAccountSystemProgram
  >;

  return instruction;
}

export type VoteInput<
  TAccountSigner extends string = string,
  TAccountPollAccount extends string = string,
  TAccountCandidateAccount extends string = string,
  TAccountVoterReceipt extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  pollAccount: Address<TAccountPollAccount>;
  candidateAccount: Address<TAccountCandidateAccount>;
  voterReceipt: Address<TAccountVoterReceipt>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getVoteInstruction<
  TAccountSigner extends string,
  TAccountPollAccount extends string,
  TAccountCandidateAccount extends string,
  TAccountVoterReceipt extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof VOTING_PROGRAM_ADDRESS,
>(
  input: VoteInput<
    TAccountSigner,
    TAccountPollAccount,
    TAccountCandidateAccount,
    TAccountVoterReceipt,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): VoteInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountPollAccount,
  TAccountCandidateAccount,
  TAccountVoterReceipt,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? VOTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    pollAccount: { value: input.pollAccount ?? null, isWritable: true },
    candidateAccount: {
      value: input.candidateAccount ?? null,
      isWritable: true,
    },
    voterReceipt: { value: input.voterReceipt ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.pollAccount),
      getAccountMeta(accounts.candidateAccount),
      getAccountMeta(accounts.voterReceipt),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getVoteInstructionDataEncoder().encode({}),
  } as VoteInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountPollAccount,
    TAccountCandidateAccount,
    TAccountVoterReceipt,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedVoteInstruction<
  TProgram extends string = typeof VOTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    pollAccount: TAccountMetas[1];
    candidateAccount: TAccountMetas[2];
    voterReceipt: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: VoteInstructionData;
};

export function parseVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      pollAccount: getNextAccount(),
      candidateAccount: getNextAccount(),
      voterReceipt: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getVoteInstructionDataDecoder().decode(instruction.data),
  };
}
