/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from "@solana/kit";
import { VOTING_PROGRAM_ADDRESS } from "../programs";

/** PollNotStarted: Poll not started yet */
export const VOTING_ERROR__POLL_NOT_STARTED = 0x1770; // 6000
/** PollEnded: Poll ended */
export const VOTING_ERROR__POLL_ENDED = 0x1771; // 6001
/** Unauthorized: Unauthorized: Only the poll authority can perform this action. */
export const VOTING_ERROR__UNAUTHORIZED = 0x1772; // 6002
/** MaxCandidatesReached: Maximum number of candidates reached. */
export const VOTING_ERROR__MAX_CANDIDATES_REACHED = 0x1773; // 6003
/** InvalidCandidateForPoll: This candidate is not valid for this poll. */
export const VOTING_ERROR__INVALID_CANDIDATE_FOR_POLL = 0x1774; // 6004

export type VotingError =
  | typeof VOTING_ERROR__INVALID_CANDIDATE_FOR_POLL
  | typeof VOTING_ERROR__MAX_CANDIDATES_REACHED
  | typeof VOTING_ERROR__POLL_ENDED
  | typeof VOTING_ERROR__POLL_NOT_STARTED
  | typeof VOTING_ERROR__UNAUTHORIZED;

let votingErrorMessages: Record<VotingError, string> | undefined;
if (process.env.NODE_ENV !== "production") {
  votingErrorMessages = {
    [VOTING_ERROR__INVALID_CANDIDATE_FOR_POLL]: `This candidate is not valid for this poll.`,
    [VOTING_ERROR__MAX_CANDIDATES_REACHED]: `Maximum number of candidates reached.`,
    [VOTING_ERROR__POLL_ENDED]: `Poll ended`,
    [VOTING_ERROR__POLL_NOT_STARTED]: `Poll not started yet`,
    [VOTING_ERROR__UNAUTHORIZED]: `Unauthorized: Only the poll authority can perform this action.`,
  };
}

export function getVotingErrorMessage(code: VotingError): string {
  if (process.env.NODE_ENV !== "production") {
    return (votingErrorMessages as Record<VotingError, string>)[code];
  }

  return "Error message not available in production bundles.";
}

export function isVotingError<TProgramErrorCode extends VotingError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode,
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VOTING_PROGRAM_ADDRESS,
    code,
  );
}
