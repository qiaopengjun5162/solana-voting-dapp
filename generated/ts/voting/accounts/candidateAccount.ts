/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const CANDIDATE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  69, 203, 73, 43, 203, 170, 96, 121,
]);

export function getCandidateAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANDIDATE_ACCOUNT_DISCRIMINATOR,
  );
}

export type CandidateAccount = {
  discriminator: ReadonlyUint8Array;
  poll: Address;
  name: string;
  votes: bigint;
};

export type CandidateAccountArgs = {
  poll: Address;
  name: string;
  votes: number | bigint;
};

export function getCandidateAccountEncoder(): Encoder<CandidateAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["poll", getAddressEncoder()],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["votes", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CANDIDATE_ACCOUNT_DISCRIMINATOR }),
  );
}

export function getCandidateAccountDecoder(): Decoder<CandidateAccount> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["poll", getAddressDecoder()],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["votes", getU64Decoder()],
  ]);
}

export function getCandidateAccountCodec(): Codec<
  CandidateAccountArgs,
  CandidateAccount
> {
  return combineCodec(
    getCandidateAccountEncoder(),
    getCandidateAccountDecoder(),
  );
}

export function decodeCandidateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<CandidateAccount, TAddress>;
export function decodeCandidateAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<CandidateAccount, TAddress>;
export function decodeCandidateAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<CandidateAccount, TAddress>
  | MaybeAccount<CandidateAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCandidateAccountDecoder(),
  );
}

export async function fetchCandidateAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<CandidateAccount, TAddress>> {
  const maybeAccount = await fetchMaybeCandidateAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCandidateAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<CandidateAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCandidateAccount(maybeAccount);
}

export async function fetchAllCandidateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<CandidateAccount>[]> {
  const maybeAccounts = await fetchAllMaybeCandidateAccount(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCandidateAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<CandidateAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCandidateAccount(maybeAccount),
  );
}
