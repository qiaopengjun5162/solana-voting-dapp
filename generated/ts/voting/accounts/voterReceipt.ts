/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const VOTER_RECEIPT_DISCRIMINATOR = new Uint8Array([
  94, 230, 87, 51, 169, 216, 144, 98,
]);

export function getVoterReceiptDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VOTER_RECEIPT_DISCRIMINATOR,
  );
}

export type VoterReceipt = {
  discriminator: ReadonlyUint8Array;
  voter: Address;
  poll: Address;
};

export type VoterReceiptArgs = { voter: Address; poll: Address };

export function getVoterReceiptEncoder(): FixedSizeEncoder<VoterReceiptArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["voter", getAddressEncoder()],
      ["poll", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: VOTER_RECEIPT_DISCRIMINATOR }),
  );
}

export function getVoterReceiptDecoder(): FixedSizeDecoder<VoterReceipt> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["voter", getAddressDecoder()],
    ["poll", getAddressDecoder()],
  ]);
}

export function getVoterReceiptCodec(): FixedSizeCodec<
  VoterReceiptArgs,
  VoterReceipt
> {
  return combineCodec(getVoterReceiptEncoder(), getVoterReceiptDecoder());
}

export function decodeVoterReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<VoterReceipt, TAddress>;
export function decodeVoterReceipt<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<VoterReceipt, TAddress>;
export function decodeVoterReceipt<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<VoterReceipt, TAddress> | MaybeAccount<VoterReceipt, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoterReceiptDecoder(),
  );
}

export async function fetchVoterReceipt<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<VoterReceipt, TAddress>> {
  const maybeAccount = await fetchMaybeVoterReceipt(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVoterReceipt<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<VoterReceipt, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVoterReceipt(maybeAccount);
}

export async function fetchAllVoterReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<VoterReceipt>[]> {
  const maybeAccounts = await fetchAllMaybeVoterReceipt(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVoterReceipt(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<VoterReceipt>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVoterReceipt(maybeAccount));
}

export function getVoterReceiptSize(): number {
  return 72;
}
