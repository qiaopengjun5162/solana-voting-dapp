/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const POLL_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  109, 254, 117, 41, 232, 74, 172, 45,
]);

export function getPollAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    POLL_ACCOUNT_DISCRIMINATOR,
  );
}

export type PollAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  name: string;
  description: string;
  startTime: bigint;
  endTime: bigint;
  candidateCount: number;
  candidates: Array<Address>;
};

export type PollAccountArgs = {
  authority: Address;
  name: string;
  description: string;
  startTime: number | bigint;
  endTime: number | bigint;
  candidateCount: number;
  candidates: Array<Address>;
};

export function getPollAccountEncoder(): Encoder<PollAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["authority", getAddressEncoder()],
      ["name", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["description", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ["startTime", getU64Encoder()],
      ["endTime", getU64Encoder()],
      ["candidateCount", getU8Encoder()],
      ["candidates", getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: POLL_ACCOUNT_DISCRIMINATOR }),
  );
}

export function getPollAccountDecoder(): Decoder<PollAccount> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["authority", getAddressDecoder()],
    ["name", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["description", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ["startTime", getU64Decoder()],
    ["endTime", getU64Decoder()],
    ["candidateCount", getU8Decoder()],
    ["candidates", getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getPollAccountCodec(): Codec<PollAccountArgs, PollAccount> {
  return combineCodec(getPollAccountEncoder(), getPollAccountDecoder());
}

export function decodePollAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<PollAccount, TAddress>;
export function decodePollAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<PollAccount, TAddress>;
export function decodePollAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<PollAccount, TAddress> | MaybeAccount<PollAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPollAccountDecoder(),
  );
}

export async function fetchPollAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<PollAccount, TAddress>> {
  const maybeAccount = await fetchMaybePollAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePollAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<PollAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePollAccount(maybeAccount);
}

export async function fetchAllPollAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<PollAccount>[]> {
  const maybeAccounts = await fetchAllMaybePollAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePollAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<PollAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePollAccount(maybeAccount));
}
