/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedAddCandidateInstruction,
  type ParsedInitializePollInstruction,
  type ParsedVoteInstruction,
} from "../instructions";

export const VOTING_PROGRAM_ADDRESS =
  "Doo2arLUifZbfqGVS5Uh7nexAMmsMzaQH5zcwZhSoijz" as Address<"Doo2arLUifZbfqGVS5Uh7nexAMmsMzaQH5zcwZhSoijz">;

export enum VotingAccount {
  CandidateAccount,
  PollAccount,
  VoterReceipt,
}

export function identifyVotingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): VotingAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 203, 73, 43, 203, 170, 96, 121]),
      ),
      0,
    )
  ) {
    return VotingAccount.CandidateAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 254, 117, 41, 232, 74, 172, 45]),
      ),
      0,
    )
  ) {
    return VotingAccount.PollAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 230, 87, 51, 169, 216, 144, 98]),
      ),
      0,
    )
  ) {
    return VotingAccount.VoterReceipt;
  }
  throw new Error(
    "The provided account could not be identified as a voting account.",
  );
}

export enum VotingInstruction {
  AddCandidate,
  InitializePoll,
  Vote,
}

export function identifyVotingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): VotingInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 34, 30, 247, 165, 210, 224, 164]),
      ),
      0,
    )
  ) {
    return VotingInstruction.AddCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 22, 99, 197, 18, 33, 115, 117]),
      ),
      0,
    )
  ) {
    return VotingInstruction.InitializePoll;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 110, 155, 23, 136, 126, 172, 25]),
      ),
      0,
    )
  ) {
    return VotingInstruction.Vote;
  }
  throw new Error(
    "The provided instruction could not be identified as a voting instruction.",
  );
}

export type ParsedVotingInstruction<
  TProgram extends string = "Doo2arLUifZbfqGVS5Uh7nexAMmsMzaQH5zcwZhSoijz",
> =
  | ({
      instructionType: VotingInstruction.AddCandidate;
    } & ParsedAddCandidateInstruction<TProgram>)
  | ({
      instructionType: VotingInstruction.InitializePoll;
    } & ParsedInitializePollInstruction<TProgram>)
  | ({
      instructionType: VotingInstruction.Vote;
    } & ParsedVoteInstruction<TProgram>);
