{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-20T15:10:02.523Z",
    "end": "2025-07-20T15:10:14.463Z",
    "duration": 11940,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "239b6f6d-ebfa-48c1-8244-53f7c2b20bb2",
      "title": "",
      "fullFile": "/Users/qiaopengjun/Code/Solana/voting/tests/voting.ts",
      "file": "/tests/voting.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
          "title": "voting",
          "fullFile": "/Users/qiaopengjun/Code/Solana/voting/tests/voting.ts",
          "file": "/tests/voting.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"voting\"",
              "fullTitle": "voting \"before all\" hook in \"voting\"",
              "timedOut": false,
              "duration": 1429,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield airdrop(voter1);\n        yield airdrop(voter2);\n        yield airdrop(unauthorizedUser);\n    })",
              "err": {},
              "uuid": "1fb9069d-d7fd-4c4c-b108-f9aaa62fbe23",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "✅ Successfully initializes a poll",
              "fullTitle": "voting ✅ Successfully initializes a poll",
              "timedOut": false,
              "duration": 487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const name = \"Favorite Framework\";\n        const description = \"Which framework do you prefer?\";\n        const startTime = new anchor_1.BN(Math.floor(Date.now() / 1000));\n        const endTime = new anchor_1.BN(startTime.toNumber() + 3600);\n        const tx = yield program.methods\n            .initializePoll(name, description, startTime, endTime)\n            .accounts({\n            pollAccount: pollAccount.publicKey,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .signers([pollAccount])\n            .rpc();\n        yield confirmTx(tx);\n        const fetchedPoll = yield program.account.pollAccount.fetch(pollAccount.publicKey);\n        chai_1.assert.strictEqual(fetchedPoll.name, name, \"Poll name does not match\");\n        chai_1.assert.strictEqual(fetchedPoll.authority.toBase58(), authority.publicKey.toBase58());\n        chai_1.assert.ok(fetchedPoll.startTime.eq(startTime), \"Start time does not match\");\n        chai_1.assert.ok(fetchedPoll.endTime.eq(endTime), \"End time does not match\");\n    })",
              "err": {},
              "uuid": "8d226617-9f47-481a-be3b-0447da29a8ad",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ Successfully adds two candidates",
              "fullTitle": "voting ✅ Successfully adds two candidates",
              "timedOut": false,
              "duration": 980,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const [candidatePda1] = getCandidatePda(pollAccount.publicKey, 0);\n        const tx1 = yield program.methods\n            .addCandidate(\"React\")\n            .accounts({\n            pollAccount: pollAccount.publicKey,\n            candidateAccount: candidatePda1,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .rpc();\n        yield confirmTx(tx1);\n        const [candidatePda2] = getCandidatePda(pollAccount.publicKey, 1);\n        const tx2 = yield program.methods\n            .addCandidate(\"Vue\")\n            .accounts({\n            pollAccount: pollAccount.publicKey,\n            candidateAccount: candidatePda2,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .rpc();\n        yield confirmTx(tx2);\n        const fetchedPoll = yield program.account.pollAccount.fetch(pollAccount.publicKey);\n        chai_1.assert.strictEqual(fetchedPoll.candidates.length, 2, \"Candidate count should be 2\");\n        chai_1.assert.strictEqual(fetchedPoll.candidateCount, 2, \"Candidate counter should be 2\");\n    })",
              "err": {},
              "uuid": "e214e96c-cab7-4aff-a7d2-dd43b6925dfc",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ Two users vote successfully",
              "fullTitle": "voting ✅ Two users vote successfully",
              "timedOut": false,
              "duration": 942,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const [candidatePda1] = getCandidatePda(pollAccount.publicKey, 0);\n        const [candidatePda2] = getCandidatePda(pollAccount.publicKey, 1);\n        const [receiptPda1] = getReceiptPda(pollAccount.publicKey, voter1.publicKey);\n        const tx1 = yield program.methods\n            .vote()\n            .accounts({\n            pollAccount: pollAccount.publicKey,\n            candidateAccount: candidatePda1,\n            voterReceipt: receiptPda1,\n            signer: voter1.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .signers([voter1])\n            .rpc();\n        yield confirmTx(tx1);\n        const [receiptPda2] = getReceiptPda(pollAccount.publicKey, voter2.publicKey);\n        const tx2 = yield program.methods\n            .vote()\n            .accounts({\n            pollAccount: pollAccount.publicKey,\n            candidateAccount: candidatePda1,\n            voterReceipt: receiptPda2,\n            signer: voter2.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .signers([voter2])\n            .rpc();\n        yield confirmTx(tx2);\n        const candidate1 = yield program.account.candidateAccount.fetch(candidatePda1);\n        const candidate2 = yield program.account.candidateAccount.fetch(candidatePda2);\n        chai_1.assert.strictEqual(candidate1.votes.toNumber(), 2, \"React should have 2 votes\");\n        chai_1.assert.strictEqual(candidate2.votes.toNumber(), 0, \"Vue should have 0 votes\");\n    })",
              "err": {},
              "uuid": "767a71c1-c995-448b-b8cb-d992de55e9ea",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ Fails to vote twice (expected failure)",
              "fullTitle": "voting ❌ Fails to vote twice (expected failure)",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        try {\n            const [candidatePda1] = getCandidatePda(pollAccount.publicKey, 0);\n            const [receiptPda1] = getReceiptPda(pollAccount.publicKey, voter1.publicKey);\n            yield program.methods\n                .vote()\n                .accounts({\n                pollAccount: pollAccount.publicKey,\n                candidateAccount: candidatePda1,\n                voterReceipt: receiptPda1,\n                signer: voter1.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .signers([voter1])\n                .rpc();\n            chai_1.assert.fail(\"Double voting should have failed but succeeded\");\n        }\n        catch (err) {\n            chai_1.assert.include(err.toString(), \"already in use\", \"Expected error for already initialized account\");\n        }\n    })",
              "err": {},
              "uuid": "bd6381a1-b0f8-4af1-be2c-e276d5e38e32",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ Unauthorized user fails to add candidate (expected failure)",
              "fullTitle": "voting ❌ Unauthorized user fails to add candidate (expected failure)",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        try {\n            const [candidatePda] = getCandidatePda(pollAccount.publicKey, 2);\n            yield program.methods\n                .addCandidate(\"Svelte\")\n                .accounts({\n                pollAccount: pollAccount.publicKey,\n                candidateAccount: candidatePda,\n                signer: unauthorizedUser.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .signers([unauthorizedUser])\n                .rpc();\n            chai_1.assert.fail(\"Unauthorized candidate addition should have failed\");\n        }\n        catch (err) {\n            chai_1.assert.equal(err.error.errorCode.code, \"Unauthorized\");\n        }\n    })",
              "err": {},
              "uuid": "a4236d7e-2952-49d2-8297-bca45dc82423",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ Fails to vote before poll starts (expected failure)",
              "fullTitle": "voting ❌ Fails to vote before poll starts (expected failure)",
              "timedOut": false,
              "duration": 928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const futurePoll = anchor.web3.Keypair.generate();\n        const startTime = new anchor_1.BN(Date.now() / 1000 + 3600);\n        const endTime = new anchor_1.BN(startTime.toNumber() + 3600);\n        const tx1 = yield program.methods\n            .initializePoll(\"Future\", \"\", startTime, endTime)\n            .accounts({\n            pollAccount: futurePoll.publicKey,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .signers([futurePoll])\n            .rpc();\n        yield confirmTx(tx1);\n        const [candidatePda] = getCandidatePda(futurePoll.publicKey, 0);\n        const tx2 = yield program.methods\n            .addCandidate(\"Future Cand\")\n            .accounts({\n            pollAccount: futurePoll.publicKey,\n            candidateAccount: candidatePda,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .rpc();\n        yield confirmTx(tx2);\n        try {\n            const [receiptPda] = getReceiptPda(futurePoll.publicKey, voter1.publicKey);\n            yield program.methods\n                .vote()\n                .accounts({\n                pollAccount: futurePoll.publicKey,\n                candidateAccount: candidatePda,\n                voterReceipt: receiptPda,\n                signer: voter1.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .signers([voter1])\n                .rpc();\n            chai_1.assert.fail(\"Voting before poll start should have failed\");\n        }\n        catch (err) {\n            chai_1.assert.equal(err.error.errorCode.code, \"PollNotStarted\");\n        }\n    })",
              "err": {},
              "uuid": "e179a5f9-3aeb-44a7-b236-f733f5680b09",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ Fails to vote after poll ends (expected failure)",
              "fullTitle": "voting ❌ Fails to vote after poll ends (expected failure)",
              "timedOut": false,
              "duration": 932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const pastPoll = anchor.web3.Keypair.generate();\n        const startTime = new anchor_1.BN(Math.floor(Date.now() / 1000) - 7200);\n        const endTime = new anchor_1.BN(Math.floor(Date.now() / 1000) - 3600);\n        const tx1 = yield program.methods\n            .initializePoll(\"Past\", \"\", startTime, endTime)\n            .accounts({\n            pollAccount: pastPoll.publicKey,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .signers([pastPoll])\n            .rpc();\n        yield confirmTx(tx1);\n        const [candidatePda] = getCandidatePda(pastPoll.publicKey, 0);\n        const tx2 = yield program.methods\n            .addCandidate(\"Past Cand\")\n            .accounts({\n            pollAccount: pastPoll.publicKey,\n            candidateAccount: candidatePda,\n            signer: authority.publicKey,\n            systemProgram: anchor.web3.SystemProgram.programId,\n        })\n            .rpc();\n        yield confirmTx(tx2);\n        try {\n            const [receiptPda] = getReceiptPda(pastPoll.publicKey, voter1.publicKey);\n            yield program.methods\n                .vote()\n                .accounts({\n                pollAccount: pastPoll.publicKey,\n                candidateAccount: candidatePda,\n                voterReceipt: receiptPda,\n                signer: voter1.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .signers([voter1])\n                .rpc();\n            chai_1.assert.fail(\"Voting after poll end should have failed\");\n        }\n        catch (err) {\n            chai_1.assert.equal(err.error.errorCode.code, \"PollEnded\");\n        }\n    })",
              "err": {},
              "uuid": "f6b261bb-457e-4ccb-9d14-297774abf3ff",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ Fails to add more than 15 candidates (expected failure)",
              "fullTitle": "voting ❌ Fails to add more than 15 candidates (expected failure)",
              "timedOut": false,
              "duration": 6211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 2; i < 15; i++) {\n            const [candidatePda] = getCandidatePda(pollAccount.publicKey, i);\n            const tx = yield program.methods\n                .addCandidate(`Cand ${i}`)\n                .accounts({\n                pollAccount: pollAccount.publicKey,\n                candidateAccount: candidatePda,\n                signer: authority.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .rpc();\n            yield confirmTx(tx);\n        }\n        try {\n            const [candidatePda] = getCandidatePda(pollAccount.publicKey, 15);\n            yield program.methods\n                .addCandidate(\"Cand 15\")\n                .accounts({\n                pollAccount: pollAccount.publicKey,\n                candidateAccount: candidatePda,\n                signer: authority.publicKey,\n                systemProgram: anchor.web3.SystemProgram.programId,\n            })\n                .rpc();\n            chai_1.assert.fail(\"Adding more than 15 candidates should have failed\");\n        }\n        catch (err) {\n            chai_1.assert.equal(err.error.errorCode.code, \"MaxCandidatesReached\");\n        }\n    })",
              "err": {},
              "uuid": "a49fefb2-928c-4ee5-9fbf-c0c98da74fd8",
              "parentUUID": "04140ab6-a738-48be-8e99-b26a52bfcb8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d226617-9f47-481a-be3b-0447da29a8ad",
            "e214e96c-cab7-4aff-a7d2-dd43b6925dfc",
            "767a71c1-c995-448b-b8cb-d992de55e9ea",
            "bd6381a1-b0f8-4af1-be2c-e276d5e38e32",
            "a4236d7e-2952-49d2-8297-bca45dc82423",
            "e179a5f9-3aeb-44a7-b236-f733f5680b09",
            "f6b261bb-457e-4ccb-9d14-297774abf3ff",
            "a49fefb2-928c-4ee5-9fbf-c0c98da74fd8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
